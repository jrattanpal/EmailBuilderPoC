//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class GoToWebinarJson {

	public class Times {
		public String startTime {get;set;} 
		public String endTime {get;set;} 

		public Times(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'startTime') {
							startTime = parser.getText();
						} else if (text == 'endTime') {
							endTime = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Times consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Webinars {
		public String webinarKey {get;set;} 
		public String webinarID {get;set;} 
		public String organizerKey {get;set;} 
		public String accountKey {get;set;} 
		public String subject {get;set;} 
		public String description {get;set;} 
		public List<Times> times {get;set;} 
		public String timeZone {get;set;} 
		public String locale {get;set;} 
		public String approvalType {get;set;} 
		public String registrationUrl {get;set;} 
		public Boolean impromptu {get;set;} 
		public Boolean isPasswordProtected {get;set;} 
		public String recurrenceType {get;set;} 
		public String experienceType {get;set;} 

		public Webinars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'webinarKey') {
							webinarKey = parser.getText();
						} else if (text == 'webinarID') {
							webinarID = parser.getText();
						} else if (text == 'organizerKey') {
							organizerKey = parser.getText();
						} else if (text == 'accountKey') {
							accountKey = parser.getText();
						} else if (text == 'subject') {
							subject = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'times') {
							times = arrayOfTimes(parser);
						} else if (text == 'timeZone') {
							timeZone = parser.getText();
						} else if (text == 'locale') {
							locale = parser.getText();
						} else if (text == 'approvalType') {
							approvalType = parser.getText();
						} else if (text == 'registrationUrl') {
							registrationUrl = parser.getText();
						} else if (text == 'impromptu') {
							impromptu = parser.getBooleanValue();
						} else if (text == 'isPasswordProtected') {
							isPasswordProtected = parser.getBooleanValue();
						} else if (text == 'recurrenceType') {
							recurrenceType = parser.getText();
						} else if (text == 'experienceType') {
							experienceType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Webinars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Embedded x_embedded {get;set;} // in json: _embedded
	public PageCls page {get;set;} 
	public String int_err_code {get;set;}
	public String msg {get;set;}

	public GoToWebinarJson(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == '_embedded') {
						x_embedded = new Embedded(parser);
					} else if (text == 'page') {
						page = new PageCls(parser);
					} else if (text == 'int_err_code') {
						int_err_code = parser.getText();
					} else if (text == 'msg') {
						msg = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'GoToWebinarJson consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class PageCls {
		public Integer size {get;set;} 
		public Integer totalElements {get;set;} 
		public Integer totalPages {get;set;} 
		public Integer number_Z {get;set;} // in json: number

		public PageCls(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'totalElements') {
							totalElements = parser.getIntegerValue();
						} else if (text == 'totalPages') {
							totalPages = parser.getIntegerValue();
						} else if (text == 'number') {
							number_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Page consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Embedded {
		public List<Webinars> webinars {get;set;} 

		public Embedded(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'webinars') {
							webinars = arrayOfWebinars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Embedded consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static GoToWebinarJson parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new GoToWebinarJson(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	





    private static List<Webinars> arrayOfWebinars(System.JSONParser p) {
        List<Webinars> res = new List<Webinars>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Webinars(p));
        }
        return res;
    }




    private static List<Times> arrayOfTimes(System.JSONParser p) {
        List<Times> res = new List<Times>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Times(p));
        }
        return res;
    }



}